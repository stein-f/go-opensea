// Package opensea provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package opensea

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "apiKeyAuth.Scopes"
)

// Account defines model for Account.
type Account struct {
	// Address The account address
	Address string `json:"address"`

	// BannerImageUrl URL of the banner image
	BannerImageUrl string `json:"banner_image_url"`

	// Bio A short biography of the account holder
	Bio string `json:"bio"`

	// JoinedDate The date when the account was created
	JoinedDate string `json:"joined_date"`

	// ProfileImageUrl URL of the profile image
	ProfileImageUrl string `json:"profile_image_url"`

	// SocialMediaAccounts List of associated social media accounts
	SocialMediaAccounts *[]struct {
		// Platform Social media platform name
		Platform *string `json:"platform,omitempty"`

		// Username Social media username
		Username *string `json:"username,omitempty"`
	} `json:"social_media_accounts,omitempty"`

	// Username The username associated with the account
	Username string `json:"username"`

	// Website The website URL of the user
	Website string `json:"website"`
}

// Collection defines model for Collection.
type Collection struct {
	// BannerImageUrl URL of the collection's banner image
	BannerImageUrl *string `json:"banner_image_url,omitempty"`

	// Category The category of the collection
	Category *string `json:"category,omitempty"`

	// Collection The slug identifier of the collection
	Collection string `json:"collection"`

	// CollectionOffersEnabled Flags if collection offers are enabled
	CollectionOffersEnabled *bool `json:"collection_offers_enabled,omitempty"`

	// Contracts List of contract details for the collection
	Contracts *[]struct {
		// Address Contract address
		Address *string `json:"address,omitempty"`

		// Chain Blockchain of the contract
		Chain *string `json:"chain,omitempty"`
	} `json:"contracts,omitempty"`

	// CreatedDate Creation date of the collection
	CreatedDate string `json:"created_date"`

	// Description A detailed description of the collection
	Description string `json:"description"`

	// DiscordUrl Collection's Discord URL
	DiscordUrl *string `json:"discord_url,omitempty"`

	// Editors List of editor addresses
	Editors *[]string `json:"editors,omitempty"`

	// Fees List of fees associated with the collection
	Fees *[]struct {
		// Fee Fee percentage
		Fee *float32 `json:"fee,omitempty"`

		// Recipient Address of the fee recipient
		Recipient *string `json:"recipient,omitempty"`

		// Required Whether the fee is required
		Required *bool `json:"required,omitempty"`
	} `json:"fees,omitempty"`

	// ImageUrl URL of the collection's image
	ImageUrl string `json:"image_url"`

	// InstagramUsername Instagram username associated with the collection
	InstagramUsername *string `json:"instagram_username,omitempty"`

	// IsDisabled Whether the collection is disabled
	IsDisabled *bool `json:"is_disabled,omitempty"`

	// IsNsfw Indicates if the collection contains NSFW content
	IsNsfw *bool `json:"is_nsfw,omitempty"`

	// Name The name of the collection
	Name string `json:"name"`

	// OpenseaUrl URL to view the collection on OpenSea
	OpenseaUrl *string `json:"opensea_url,omitempty"`

	// Owner The Ethereum address of the collection owner
	Owner string `json:"owner"`

	// PaymentTokens List of payment tokens supported by the collection
	PaymentTokens *[]struct {
		// Address Address of the payment token
		Address *string `json:"address,omitempty"`

		// Chain Blockchain of the payment token
		Chain *string `json:"chain,omitempty"`

		// Decimals Number of decimals of the token
		Decimals *int `json:"decimals,omitempty"`

		// EthPrice Price of the token in ETH
		EthPrice *string `json:"eth_price,omitempty"`

		// Image URL of the payment token's image
		Image *string `json:"image,omitempty"`

		// Name Name of the token
		Name *string `json:"name,omitempty"`

		// Symbol Payment token symbol
		Symbol *string `json:"symbol,omitempty"`

		// UsdPrice Price of the token in USD
		UsdPrice *string `json:"usd_price,omitempty"`
	} `json:"payment_tokens,omitempty"`

	// ProjectUrl Official project URL
	ProjectUrl *string `json:"project_url,omitempty"`

	// Rarity Rarity-related metadata
	Rarity *struct {
		// CalculatedAt Timestamp when the rarity was calculated
		CalculatedAt *string `json:"calculated_at,omitempty"`

		// MaxRank Maximum rank of tokens
		MaxRank *int `json:"max_rank,omitempty"`

		// StrategyId Rarity calculation strategy identifier
		StrategyId *string `json:"strategy_id,omitempty"`

		// StrategyVersion Version of the rarity calculation strategy
		StrategyVersion *string `json:"strategy_version,omitempty"`

		// TokensScored Number of tokens scored
		TokensScored *int `json:"tokens_scored,omitempty"`
	} `json:"rarity,omitempty"`

	// SafelistStatus The safelist status of the collection
	SafelistStatus *string `json:"safelist_status,omitempty"`

	// TelegramUrl Collection's Telegram URL
	TelegramUrl *string `json:"telegram_url,omitempty"`

	// TotalSupply Total number of items in the collection
	TotalSupply int `json:"total_supply"`

	// TraitOffersEnabled Flags if trait offers are enabled
	TraitOffersEnabled *bool `json:"trait_offers_enabled,omitempty"`

	// TwitterUsername Twitter username associated with the collection
	TwitterUsername *string `json:"twitter_username,omitempty"`

	// WikiUrl URL to the wiki page (if available)
	WikiUrl *string `json:"wiki_url,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccount request
	GetAccount(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollection request
	GetCollection(ctx context.Context, collectionSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccount(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollection(ctx context.Context, collectionSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionRequest(c.Server, collectionSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionRequest generates requests for GetCollection
func NewGetCollectionRequest(server string, collectionSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_slug", runtime.ParamLocationPath, collectionSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountWithResponse request
	GetAccountWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAccountResponse, error)

	// GetCollectionWithResponse request
	GetCollectionWithResponse(ctx context.Context, collectionSlug string, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error)
}

type GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
}

// Status returns HTTPResponse.Status
func (r GetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountWithResponse request returning *GetAccountResponse
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetAccountResponse, error) {
	rsp, err := c.GetAccount(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResponse(rsp)
}

// GetCollectionWithResponse request returning *GetCollectionResponse
func (c *ClientWithResponses) GetCollectionWithResponse(ctx context.Context, collectionSlug string, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error) {
	rsp, err := c.GetCollection(ctx, collectionSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionResponse(rsp)
}

// ParseGetAccountResponse parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResponse(rsp *http.Response) (*GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionResponse parses an HTTP response from a GetCollectionWithResponse call
func ParseGetCollectionResponse(rsp *http.Response) (*GetCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
